# Generated by Django 4.2.16 on 2024-11-17 13:42

from decimal import Decimal
from django.conf import settings
import django.contrib.postgres.indexes
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid
import wger.nutrition.helpers
import wger.nutrition.models.image
import wger.utils.fields
import wger.utils.helpers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_title', models.CharField(blank=True, max_length=300, verbose_name='The original title of this object, if available')),
                ('license_object_url', models.URLField(blank=True, verbose_name='Link to original object, if available')),
                ('license_author', models.TextField(blank=True, help_text='If you are not the author, enter the name or source here.', max_length=3500, null=True, verbose_name='Author(s)')),
                ('license_author_url', models.URLField(blank=True, verbose_name='Link to author profile, if available')),
                ('license_derivative_source_url', models.URLField(blank=True, help_text='Note that a derivative work is one which is not only based on a previous work, but which also contains sufficient new, creative content to entitle it to its own copyright.', verbose_name='Link to the original source, if this is a derivative work')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Date')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='Date')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                ('name', models.CharField(max_length=200, validators=[django.core.validators.MinLengthValidator(3)], verbose_name='Name')),
                ('energy', models.IntegerField(help_text='In kcal per 100g', verbose_name='Energy')),
                ('protein', models.DecimalField(decimal_places=3, help_text='In g per 100g of product', max_digits=6, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Protein')),
                ('carbohydrates', models.DecimalField(decimal_places=3, help_text='In g per 100g of product', max_digits=6, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Carbohydrates')),
                ('carbohydrates_sugar', models.DecimalField(blank=True, decimal_places=3, help_text='In g per 100g of product', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Sugar content in carbohydrates')),
                ('fat', models.DecimalField(decimal_places=3, help_text='In g per 100g of product', max_digits=6, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Fat')),
                ('fat_saturated', models.DecimalField(blank=True, decimal_places=3, help_text='In g per 100g of product', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Saturated fat content in fats')),
                ('fiber', models.DecimalField(blank=True, decimal_places=3, help_text='In g per 100g of product', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Fiber')),
                ('sodium', models.DecimalField(blank=True, decimal_places=3, help_text='In g per 100g of product', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Sodium')),
                ('code', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('remote_id', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('source_name', models.CharField(blank=True, max_length=200, null=True)),
                ('source_url', models.URLField(blank=True, help_text='Link to product', null=True, verbose_name='Link')),
                ('last_imported', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date')),
                ('common_name', models.CharField(blank=True, max_length=200, null=True)),
                ('brand', models.CharField(blank=True, max_length=200, null=True, verbose_name='Brand name of product')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='IngredientCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
            ],
            options={
                'verbose_name_plural': 'Ingredient Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='IngredientWeightUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gram', models.IntegerField(verbose_name='Amount in grams')),
                ('amount', models.DecimalField(decimal_places=2, default=1, help_text='Unit amount, e.g. "1 Cup" or "1/2 spoon"', max_digits=5, verbose_name='Amount')),
                ('ingredient', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='nutrition.ingredient', verbose_name='Ingredient')),
            ],
        ),
        migrations.CreateModel(
            name='Meal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(blank=True, editable=False, verbose_name='Order')),
                ('time', wger.utils.fields.Html5TimeField(blank=True, null=True, verbose_name='Time (approx)')),
                ('name', models.CharField(blank=True, help_text='Give meals a textual description / name such as "Breakfast" or "after workout"', max_length=25, verbose_name='Name')),
            ],
            options={
                'ordering': ['time'],
            },
        ),
        migrations.CreateModel(
            name='WeightUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('language', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='core.language', verbose_name='Language')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='NutritionPlan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateField(auto_now_add=True, verbose_name='Creation date')),
                ('description', models.CharField(blank=True, help_text='A description of the goal of the plan, e.g. "Gain mass" or "Prepare for summer"', max_length=80, verbose_name='Description')),
                ('only_logging', models.BooleanField(default=False, verbose_name='Only logging')),
                ('goal_energy', models.IntegerField(default=None, null=True)),
                ('goal_protein', models.IntegerField(default=None, null=True)),
                ('goal_carbohydrates', models.IntegerField(default=None, null=True)),
                ('goal_fiber', models.IntegerField(default=None, null=True)),
                ('goal_fat', models.IntegerField(default=None, null=True)),
                ('has_goal_calories', models.BooleanField(default=False, help_text='Tick the box if you want to mark this plan as having a goal amount of calories. You can use the calculator or enter the value yourself.', verbose_name='Use daily calories')),
                ('user', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'ordering': ['-creation_date'],
            },
        ),
        migrations.CreateModel(
            name='MealItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(blank=True, editable=False, verbose_name='Order')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=6, validators=[django.core.validators.MinValueValidator(Decimal('1')), django.core.validators.MaxValueValidator(Decimal('1000'))], verbose_name='Amount')),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutrition.ingredient', verbose_name='Ingredient')),
                ('meal', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='nutrition.meal', verbose_name='Nutrition plan')),
                ('weight_unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='nutrition.ingredientweightunit', verbose_name='Weight unit')),
            ],
            bases=(wger.nutrition.helpers.BaseMealItem, models.Model),
        ),
        migrations.AddField(
            model_name='meal',
            name='plan',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='nutrition.nutritionplan', verbose_name='Nutrition plan'),
        ),
        migrations.CreateModel(
            name='LogItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date and Time (Approx.)')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Comment')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=6, validators=[django.core.validators.MinValueValidator(Decimal('1')), django.core.validators.MaxValueValidator(Decimal('1000'))], verbose_name='Amount')),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutrition.ingredient', verbose_name='Ingredient')),
                ('meal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='log_items', to='nutrition.meal', verbose_name='Meal')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutrition.nutritionplan', verbose_name='Nutrition plan')),
                ('weight_unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='nutrition.ingredientweightunit', verbose_name='Weight unit')),
            ],
            options={
                'ordering': ['-datetime'],
            },
            bases=(wger.nutrition.helpers.BaseMealItem, models.Model),
        ),
        migrations.AddField(
            model_name='ingredientweightunit',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutrition.weightunit', verbose_name='Weight unit'),
        ),
        migrations.AddField(
            model_name='ingredient',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='nutrition.ingredientcategory', verbose_name='Category'),
        ),
        migrations.AddField(
            model_name='ingredient',
            name='language',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='core.language', verbose_name='Language'),
        ),
        migrations.AddField(
            model_name='ingredient',
            name='license',
            field=models.ForeignKey(default=2, on_delete=django.db.models.deletion.CASCADE, to='core.license', verbose_name='License'),
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_title', models.CharField(blank=True, max_length=300, verbose_name='The original title of this object, if available')),
                ('license_object_url', models.URLField(blank=True, verbose_name='Link to original object, if available')),
                ('license_author', models.TextField(blank=True, help_text='If you are not the author, enter the name or source here.', max_length=3500, null=True, verbose_name='Author(s)')),
                ('license_author_url', models.URLField(blank=True, verbose_name='Link to author profile, if available')),
                ('license_derivative_source_url', models.URLField(blank=True, help_text='Note that a derivative work is one which is not only based on a previous work, but which also contains sufficient new, creative content to entitle it to its own copyright.', verbose_name='Link to the original source, if this is a derivative work')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                ('image', models.ImageField(height_field='height', help_text='Only PNG and JPEG formats are supported', upload_to=wger.nutrition.models.image.ingredient_image_upload_dir, verbose_name='Image', width_field='width')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_update', models.DateTimeField(auto_now=True)),
                ('size', models.IntegerField()),
                ('height', models.IntegerField(editable=False)),
                ('width', models.IntegerField(editable=False)),
                ('ingredient', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='nutrition.ingredient')),
                ('license', models.ForeignKey(default=2, on_delete=django.db.models.deletion.CASCADE, to='core.license', verbose_name='License')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, wger.utils.helpers.BaseImage),
        ),
        migrations.AddIndex(
            model_name='ingredient',
            index=django.contrib.postgres.indexes.GinIndex(fields=['name'], name='nutrition_i_name_8f538f_gin'),
        ),
    ]
